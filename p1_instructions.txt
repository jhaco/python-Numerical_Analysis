               MACHINE PROBLEM 1, due on January 31, 2019

1. Write a subroutine which computes the sum

        Sum = 1 + 1/(2^s) + 1/(3^s) + ... + 1/(N^s)

        for s=2,3 and N=10^4,10^5,10^6.

2. Write a program which prompts the user for the values of s and n,
   where n in an integer and N=10^n and the uses the above subroutine. 
   Use float/real type for you sum variable if you program in C, C++, 
   or any other language. Do not use double! 

   In Matlab: run s=2 with N=10^7,10^8,10^9 and s=3 with N=10^6,10^7,10^8
   but for this MP it is much better to use single precision â€“ which is 
   possible with the new version of Matlab. In that case run the smaller 
   values for N: 10^4,10^5,10^6.


3. Compute the same values but with backward summation, i.e.,

        Sum = 1/(N^s) + ... + 1/(3^s) + 1/(2^s) + 1

4. Turn in a page with your results in a table arranged in the following way:


For each value of s and N, print the sums, and the difference between
the forward and the backward sums. Note that if you use Matlab with 
double precision your FW and BW sums will be almost the same. 

In the cases s=2 and s=3, also compare the partial sums with the infinite sum:
zeta(s) = 1 + 1/(2^2) + 1/(3^2) + ... + 1/(N^2)+ ....
You can use:
             zeta(2)=1.6449340668482264 for s=2, 
             zeta(3)=1.20205690315959   for s=3.

For each value of s and N, print the differences:
zeta - forward, zeta - backward, and the ratio of the two absolute errors.


Which values are closer to  the "real values" of the corresponding sums and why?
